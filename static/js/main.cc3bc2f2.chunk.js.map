{"version":3,"sources":["components/Header.js","components/Layout.js","redux/actions/posts.js","redux/actionTypes.js","contexts/AppContext.js","pages/Blog.js","pages/Home.js","constants.js","components/renderers/CodeBlockRenderer.js","pages/Post.js","redux/reducers/appReducer.js","redux/reducers/postsReducer.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js"],"names":["Header","align","Alignment","LEFT","to","process","RIGHT","className","Classes","BUTTON","MINIMAL","join","icon","BUTTON_TEXT","Layout","children","dispatch","useDispatch","useEffect","type","payload","fetch","then","res","json","toaster","Toaster","create","position","Position","BOTTOM_RIGHT","canEscapeKeyClear","maxToasts","usePortal","AppContext","React","createContext","AppContextProvider","props","Provider","value","Blog","posts","useSelector","state","LIST_UNSTYLED","map","post","fileName","title","dayjs","date","format","Home","postHeaderRegex","CodeBlockRenderer","language","useContext","dangerouslySetInnerHTML","__html","onContextMenu","e","preventDefault","stopPropagation","str","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyToClipboard","show","intent","Intent","PRIMARY","message","timeout","showLineNumbers","style","anOldHope","Post","name","match","params","useState","content","setContent","postMetadata","find","i","text","replace","setTimeout","renderers","code","source","shortname","config","url","window","location","href","identifier","size","color","loading","initialState","appReducer","action","postsReducer","sort","i1","i2","rootReducer","combineReducers","app","persistConfig","key","storage","localForage","whitelist","persistedReducer","persistReducer","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","thunk","promise","persistStore","Boolean","hostname","FocusStyleManager","onlyShowFocusOnTabs","ReactDOM","render","StrictMode","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cc3bc2f2.chunk.js","sourcesContent":["import {\n    Alignment,\n    Classes,\n    Icon,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n} from '@blueprintjs/core';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <Navbar>\n            <NavbarGroup align={Alignment.LEFT}>\n                <NavbarHeading>\n                    <Link to={'/'}>{process.env.REACT_APP_APP_NAME}</Link>\n                </NavbarHeading>\n            </NavbarGroup>\n            <NavbarGroup align={Alignment.RIGHT}>\n                <NavbarDivider />\n                <Link\n                    to={'/'}\n                    className={[Classes.BUTTON, Classes.MINIMAL].join(' ')}>\n                    <Icon icon={'home'} />\n                    <span className={Classes.BUTTON_TEXT}>Home</span>\n                </Link>\n                <Link\n                    to={'/projects'}\n                    className={[Classes.BUTTON, Classes.MINIMAL].join(' ')}>\n                    <Icon icon={'projects'} />\n                    <span className={Classes.BUTTON_TEXT}>Projects</span>\n                </Link>\n                <Link\n                    to={'/blog'}\n                    className={[Classes.BUTTON, Classes.MINIMAL].join(' ')}>\n                    <Icon icon={'text-highlight'} />\n                    <span className={Classes.BUTTON_TEXT}>Blog</span>\n                </Link>\n            </NavbarGroup>\n        </Navbar>\n    );\n};\n\nHeader.propTypes = {};\n\nexport default Header;\n","import React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {getPostMetadatas} from '../redux/actions/posts';\nimport Header from './Header';\n\nconst Layout = ({children}) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getPostMetadatas());\n    }, [dispatch]);\n\n    return (\n        <div className={'layout'}>\n            <Header />\n            <div className={'content'}>\n                <div className={'container'}>{children}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default Layout;\n","import {FETCH_POSTS} from '../actionTypes';\n\nexport const getPostMetadatas = () => {\n    return (dispatch) => {\n        const payload = fetch('/metadata.json').then((res) => res.json());\n\n        dispatch({\n            type: FETCH_POSTS,\n            payload,\n        });\n    };\n};\n","// App\nexport const SAMPLE_ACTION_TYPE = 'SAMPLE_ACTION_TYPE';\n\n// Posts\nexport const FETCH_POSTS = 'FETCH_POSTS';\n","import {Position, Toaster} from '@blueprintjs/core';\nimport React from 'react';\n\nconst toaster = Toaster.create({\n    position: Position.BOTTOM_RIGHT,\n    canEscapeKeyClear: true,\n    maxToasts: 1,\n    usePortal: true,\n});\n\nexport const AppContext = React.createContext();\n\nexport const AppContextProvider = (props) => {\n    return (\n        <AppContext.Provider\n            value={{\n                toaster,\n            }}>\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n","import {Classes} from '@blueprintjs/core';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nconst Blog = () => {\n    const posts = useSelector((state) => state.posts);\n\n    return (\n        <ul className={Classes.LIST_UNSTYLED}>\n            {posts.map((post) => {\n                return (\n                    <li>\n                        <Link to={`/post/${post.fileName}`}>{post.title}</Link>\n                        <span> {dayjs(post.date).format('DD-MM-YYYY')}</span>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nBlog.propTypes = {};\n\nexport default Blog;\n","import React from 'react';\n\nfunction Home() {\n    return <div>My CV will be here soon.</div>;\n}\n\nexport default Home;\n","export const postHeaderRegex = /^---([\\S\\s]*)---\\n/g;\n","import {Intent} from '@blueprintjs/core';\nimport React, {useContext} from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport {anOldHope} from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {AppContext} from '../../contexts/AppContext';\n\nconst copyToClipboard = (str) => {\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n};\n\nconst CodeBlockRenderer = ({language, value}) => {\n    const {toaster} = useContext(AppContext);\n\n    if (language === 'embed') {\n        return (\n            <div\n                className={'embed'}\n                dangerouslySetInnerHTML={{__html: value}}\n            />\n        );\n    }\n\n    return (\n        <div\n            onContextMenu={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                copyToClipboard(value);\n\n                toaster.show({\n                    intent: Intent.PRIMARY,\n                    message: `Copied to clipboard!`,\n                    timeout: 1000,\n                    icon: 'clipboard',\n                });\n            }}>\n            <SyntaxHighlighter\n                showLineNumbers={true}\n                language={language}\n                style={anOldHope}>\n                {value}\n            </SyntaxHighlighter>\n        </div>\n    );\n};\n\nexport default CodeBlockRenderer;\n","import {DiscussionEmbed} from 'disqus-react';\nimport React, {useEffect, useState} from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport {useSelector} from 'react-redux';\nimport {MagicSpinner} from 'react-spinners-kit';\nimport {postHeaderRegex} from '../constants';\nimport CodeBlockRenderer from '../components/renderers/CodeBlockRenderer';\n\nconst POST_BASE_URL =\n    process.env.NODE_ENV === 'production'\n        ? 'https://raw.githubusercontent.com/kursat/kursat.github.io/master/blog-content'\n        : '/blog-content';\n\nconst Post = ({\n    match: {\n        params: {name},\n    },\n}) => {\n    const [content, setContent] = useState(false);\n\n    const postMetadata = useSelector((state) =>\n        state.posts.find((i) => i.fileName === name),\n    );\n\n    useEffect(() => {\n        fetch(`${POST_BASE_URL}/${name}`)\n            .then((res) => res.text())\n            .then((text) => text.replace(postHeaderRegex, ''))\n            .then((res) =>\n                setTimeout(() => {\n                    setContent(res);\n                }, 0),\n            );\n    }, [name]);\n\n    return (\n        <>\n            {content ? (\n                <>\n                    <h1>{postMetadata && postMetadata.title}</h1>\n                    <ReactMarkdown\n                        renderers={{code: CodeBlockRenderer}}\n                        source={content}\n                    />\n                    <DiscussionEmbed\n                        shortname={'kursat-github-io'}\n                        config={{\n                            url: window.location.href.replace('#', ''),\n                            identifier: window.location.href.replace('#', ''),\n                            title: name,\n                        }}\n                    />\n                </>\n            ) : (\n                <div className={'center-flex'}>\n                    <MagicSpinner size={100} color=\"#5c7080\" loading={true} />\n                </div>\n            )}\n        </>\n    );\n};\n\nPost.propTypes = {};\n\nexport default Post;\n","import {SAMPLE_ACTION_TYPE} from '../actionTypes';\n\nconst initialState = {};\n\nfunction appReducer(state = initialState, action) {\n    switch (action.type) {\n        case SAMPLE_ACTION_TYPE:\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default appReducer;\n","import {FETCH_POSTS} from '../actionTypes';\n\nconst initialState = [];\n\nfunction postsReducer(state = initialState, action) {\n    switch (action.type) {\n        case `${FETCH_POSTS}_FULFILLED`: {\n            return action.payload.sort((i1, i2) => i1.date < i2.date);\n        }\n        default:\n            return state;\n    }\n}\n\nexport default postsReducer;\n","import {combineReducers} from 'redux';\n\nimport app from './appReducer';\nimport posts from './postsReducer';\n\nconst rootReducer = combineReducers({\n    app,\n    posts,\n});\n\nexport default rootReducer;\n","import {applyMiddleware, createStore} from 'redux';\nimport {persistReducer, persistStore} from 'redux-persist';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware';\nimport localForage from 'localforage';\n\nimport rootReducer from './reducers';\n\nconst persistConfig = {\n    key: 'root',\n    storage: localForage,\n    whitelist: ['app'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst store = createStore(\n    persistedReducer,\n    composeEnhancers(applyMiddleware(thunk, promise)),\n);\n\nconst persistor = persistStore(store);\n\nexport {persistor, store};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import {FocusStyleManager} from '@blueprintjs/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Layout from './components/Layout';\nimport {AppContextProvider} from './contexts/AppContext';\nimport Blog from './pages/Blog';\nimport Home from './pages/Home';\nimport Post from './pages/Post';\nimport {store} from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/app.scss';\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <AppContextProvider>\n                    <Layout>\n                        <Route exact path={'/'} component={Home} />\n                        <Route exact path={'/blog'} component={Blog} />\n                        <Route exact path={'/post/:name'} component={Post} />\n                    </Layout>\n                </AppContextProvider>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}