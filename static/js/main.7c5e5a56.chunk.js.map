{"version":3,"sources":["components/App.js","components/Blog.js","components/Header.js","components/Layout.js","components/CodeBlock.js","components/Post.js","serviceWorker.js","index.js"],"names":["App","to","Blog","useState","posts","setPosts","useEffect","fetch","then","res","json","data","map","post","console","log","file","title","Header","align","Alignment","LEFT","process","RIGHT","className","Classes","BUTTON","MINIMAL","join","icon","BUTTON_TEXT","Layout","children","CodeBlock","this","props","language","value","style","darcula","PureComponent","defaultProps","Post","name","match","params","content","setContent","text","renderers","code","source","Boolean","window","location","hostname","FocusStyleManager","onlyShowFocusOnTabs","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6PAYeA,MATf,WACI,OACI,6BACI,mCACA,kBAAC,IAAD,CAAMC,GAAI,SAAV,U,QCwBGC,EA5BF,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,KASf,OANAC,qBAAU,WACNC,MAAM,eACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUN,EAASM,QAC9B,IAGC,mCAEKP,EAAMQ,KAAI,SAACC,GAER,OADAC,QAAQC,IAAI,SAAUF,GAElB,oCACI,4BACI,kBAAC,IAAD,CAAMZ,GAAE,gBAAWY,EAAKG,OAASH,EAAKI,c,wBCmBnDC,EA3BA,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAaC,MAAOC,IAAUC,MAC1B,kBAAC,IAAD,KAAgBC,gEAEpB,kBAAC,IAAD,CAAaH,MAAOC,IAAUG,OAC1B,kBAAC,IAAD,MACA,kBAAC,IAAD,CACItB,GAAI,IACJuB,UAAW,CAACC,IAAQC,OAAQD,IAAQE,SAASC,KAAK,MAClD,kBAAC,IAAD,CAAMC,KAAM,SACZ,0BAAML,UAAWC,IAAQK,aAAzB,SAEJ,kBAAC,IAAD,CACI7B,GAAI,QACJuB,UAAW,CAACC,IAAQC,OAAQD,IAAQE,SAASC,KAAK,MAClD,kBAAC,IAAD,CAAMC,KAAM,iBACZ,0BAAML,UAAWC,IAAQK,aAAzB,YClBLC,EATA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,OACI,6BACI,kBAAC,EAAD,MACCA,I,mECFPC,E,uKAUQ,IAAD,EACqBC,KAAKC,MAAxBC,EADF,EACEA,SAAUC,EADZ,EACYA,MACjB,OACI,oCAEI,kBAAC,IAAD,CAAmBD,SAAUA,EAAUE,MAAOC,KACzCF,Q,GAhBGG,iBAAlBP,EAMKQ,aAAe,CAClBL,SAAU,MAgBHH,QCFAS,EAtBF,SAAC,GAIP,IAFUC,EAEX,EAHFC,MACIC,OAASF,KAEX,EAC4BxC,mBAAS,cADrC,mBACK2C,EADL,KACcC,EADd,KASF,OANAzC,qBAAU,WACNC,MAAM,iBAAD,OAAkBoC,EAAlB,QACAnC,MAAK,SAACC,GAAD,OAASA,EAAIuC,UAClBxC,MAAK,SAACC,GAAD,OAASsC,EAAWtC,QAC/B,CAACkC,IAGA,6BACI,kBAAC,IAAD,CAAeM,UAAW,CAACC,KAAMjB,GAAYkB,OAAQL,MCP7CM,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACrB,2D,OCNZY,IAAkBC,sBAElBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAW/D,IACnC,kBAAC,IAAD,CAAO6D,OAAK,EAACC,KAAM,QAASC,UAAW7D,IACvC,kBAAC,IAAD,CAAO2D,OAAK,EAACC,KAAM,cAAeC,UAAWrB,OAIzDsB,SAASC,eAAe,SD4GpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB5D,MAAK,SAAC6D,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJ1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.7c5e5a56.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div>\n            <p>Home</p>\n            <Link to={'/blog'}>Blog</Link>\n        </div>\n    );\n}\n\nexport default App;\n","import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Blog = () => {\n    const [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        fetch('/posts.json')\n            .then((res) => res.json())\n            .then((data) => setPosts(data));\n    }, []);\n\n    return (\n        <div>\n            qwe\n            {posts.map((post) => {\n                console.log('post: ', post);\n                return (\n                    <>\n                        <h1>\n                            <Link to={`/post/${post.file}`}>{post.title}</Link>\n                        </h1>\n                    </>\n                );\n            })}\n        </div>\n    );\n};\n\nBlog.propTypes = {};\n\nexport default Blog;\n","import {\n    Alignment,\n    Classes,\n    Icon,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n} from '@blueprintjs/core';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <Navbar>\n            <NavbarGroup align={Alignment.LEFT}>\n                <NavbarHeading>{process.env.REACT_APP_APP_NAME}</NavbarHeading>\n            </NavbarGroup>\n            <NavbarGroup align={Alignment.RIGHT}>\n                <NavbarDivider />\n                <Link\n                    to={'/'}\n                    className={[Classes.BUTTON, Classes.MINIMAL].join(' ')}>\n                    <Icon icon={'home'} />\n                    <span className={Classes.BUTTON_TEXT}>Home</span>\n                </Link>\n                <Link\n                    to={'/blog'}\n                    className={[Classes.BUTTON, Classes.MINIMAL].join(' ')}>\n                    <Icon icon={'not-equal-to'} />\n                    <span className={Classes.BUTTON_TEXT}>Blog</span>\n                </Link>\n            </NavbarGroup>\n        </Navbar>\n    );\n};\n\nHeader.propTypes = {};\n\nexport default Header;\n","import React from 'react';\nimport Header from './Header';\n\nconst Layout = ({children}) => {\n    return (\n        <div>\n            <Header />\n            {children}\n        </div>\n    );\n};\n\nexport default Layout;\n","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\nimport {darcula} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nclass CodeBlock extends PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n        language: PropTypes.string,\n    };\n\n    static defaultProps = {\n        language: null,\n    };\n\n    render() {\n        const {language, value} = this.props;\n        return (\n            <div>\n                Code\n                <SyntaxHighlighter language={language} style={darcula}>\n                    {value}\n                </SyntaxHighlighter>\n            </div>\n        );\n    }\n}\n\nexport default CodeBlock;\n","import React, {useEffect, useState} from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from './CodeBlock';\n\nconst Post = ({\n    match: {\n        params: {name},\n    },\n}) => {\n    const [content, setContent] = useState('Loading...');\n\n    useEffect(() => {\n        fetch(`/blog-content/${name}.md`)\n            .then((res) => res.text())\n            .then((res) => setContent(res));\n    }, [name]);\n\n    return (\n        <div>\n            <ReactMarkdown renderers={{code: CodeBlock}} source={content} />\n        </div>\n    );\n};\n\nPost.propTypes = {};\n\nexport default Post;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import {FocusStyleManager} from '@blueprintjs/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter, Route} from 'react-router-dom';\nimport App from './components/App';\nimport Blog from './components/Blog';\nimport Layout from './components/Layout';\nimport Post from './components/Post';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/app.scss';\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Layout>\n                <Route exact path={'/'} component={App} />\n                <Route exact path={'/blog'} component={Blog} />\n                <Route exact path={'/post/:name'} component={Post} />\n            </Layout>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}